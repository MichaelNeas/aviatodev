{"version":3,"sources":["logo.svg","Tile.js","Grid.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Tile","tileStyle","url","backgroundSize","backgroundImage","activeIcon","status","background","state","overlay","this","setState","overlayClass","className","style","props","value","icon","onClick","changeOverlayState","bind","name","active","devStack","displayName","editor","job","keyboard","location","osPreference","superPowerChoice","Component","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","Grid","createGrid","jsonDB","map","member","App","src","logo","alt","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.43cdd043.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3c1f915b.svg\";","import React, { Component } from 'react';\n\nclass Tile extends Component {\n    constructor(){\n        super();\n\n        this.state = {\n           overlay: false\n        }\n    }\n\n    tileStyle = url => {\n        return {\n            backgroundSize: \"cover\",\n            backgroundImage: `url(${url})`\n        }\n    }\n    \n    activeIcon = status => {\n        return {\n            background: status ? \"#1e824c\" : \"#f7ca18\"\n        }\n    }\n\n    changeOverlayState() {\n        this.setState({overlay: !this.state.overlay})\n    }\n\n    render() {\n        let overlayClass = this.state.overlay ? \"tileWithOverlay\" : \"tileWithoutOverlay\"\n\n        return ( \n            <div className=\"tile\" style={this.tileStyle(this.props.value.icon)} onClick={this.changeOverlayState.bind(this)}>\n                <div className=\"titleNameContainer\">\n                    <div className=\"activeIconLeft\"></div>\n                    <h3 className=\"tileName\">{this.props.value.name}</h3>\n                    <div className=\"activeIconRight\" style={this.activeIcon(this.props.value.active)}></div>\n                </div>\n                <div className={`tileOverlay ${overlayClass}`}>\n                    <div className=\"overlayText\">\n                        &#123;<br/>\n                        &nbsp;&nbsp;\"<b>devStack</b>\": \"{this.props.value.devStack}\",<br/>\n                        &nbsp;&nbsp;\"<b>displayName</b>\": \"{this.props.value.displayName}\",<br/>\n                        &nbsp;&nbsp;\"<b>editor</b>\": \"{this.props.value.editor}\",<br/>\n                        &nbsp;&nbsp;\"<b>job</b>\": \"{this.props.value.job}\",<br/>\n                        &nbsp;&nbsp;\"<b>keyboard</b>\": \"{this.props.value.keyboard}\",<br/>\n                        &nbsp;&nbsp;\"<b>location</b>\": \"{this.props.value.location}\",<br/>\n                        &nbsp;&nbsp;\"<b>osPreference</b>\": \"{this.props.value.osPreference}\",<br/>\n                        &nbsp;&nbsp;\"<b>superPowerChoice</b>\": \"{this.props.value.superPowerChoice}\"<br/>\n                        &#125;\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Tile;","import React, { Component } from 'react';\nimport Tile from './Tile';\nimport jsonDB from './db/aviatodb.json';\n\nvar shuffle = function (array) {\n\n\tvar currentIndex = array.length;\n\tvar temporaryValue, randomIndex;\n\n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n\t\t// Pick a remaining element...\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\tcurrentIndex -= 1;\n\n\t\t// And swap it with the current element.\n\t\ttemporaryValue = array[currentIndex];\n\t\tarray[currentIndex] = array[randomIndex];\n\t\tarray[randomIndex] = temporaryValue;\n\t}\n\n\treturn array;\n};\n\nclass Grid extends Component {\n    createGrid = () => shuffle(jsonDB).map(member => <Tile value={member}></Tile>)\n\n    render() {\n        return ( \n            <div className=\"grid\">\n                {this.createGrid()}\n            </div>\n        )\n    }\n}\n\nexport default Grid;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Grid from './Grid';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Aviato.Dev</h1>\n        </header>\n        <Grid></Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}